/*
 * This software is copyrighted 2011 by G. Andrew Mangogna.
 * The following terms apply to all files associated with the software unless
 * explicitly disclaimed in individual files.
 * 
 * The authors hereby grant permission to use, copy, modify, distribute,
 * and license this software and its documentation for any purpose, provided
 * that existing copyright notices are retained in all copies and that this
 * notice is included verbatim in any distributions. No written agreement,
 * license, or royalty fee is required for any of the authorized uses.
 * Modifications to this software may be copyrighted by their authors and
 * need not follow the licensing terms described here, provided that the
 * new terms are clearly indicated on the first page of each file where
 * they apply.
 * 
 * IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING
 * OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES
 * THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
 * IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
 * NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS,
 * OR MODIFICATIONS.
 * 
 * GOVERNMENT USE: If you are acquiring this software on behalf of the
 * U.S. government, the Government shall have only "Restricted Rights"
 * in the software and related documentation as defined in the Federal
 * Acquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you
 * are acquiring the software on behalf of the Department of Defense,
 * the software shall be classified as "Commercial Computer Software"
 * and the Government shall have only "Restricted Rights" as defined in
 * Clause 252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing,
 * the authors grant the U.S. Government and others acting in its behalf
 * permission to use and distribute the software in accordance with the
 * terms specified in this license.
 *
 *++
 * PROJECT:
 *  tack
 *
 * MODULE:
 *  harness.h -- interface to test harness execution library
 *
 * ABSTRACT:
 *
 * $Revision: 1.4 $
 * $Date: 2011/12/24 23:26:58 $
 *--
 */
#ifndef HARNESS_H_
#define HARNESS_H_

/*
 * INCLUDE FILES
 */
#include <stdbool.h>
#include <stdarg.h>

#include "mechs.h"

/*
 * MACRO DEFINITIONS
 */
#ifndef DRIVER_PORT
#   define  DRIVER_PORT     3902
#endif /* DRIVER_PORT */

#ifndef STUB_PORT
#   define  STUB_PORT       3903
#endif /* STUB_PORT */

/*
 * TYPE DEFINITIONS
 */
struct pycca_domain_portal ;
/*
 * Domain operation function.
 * These functions are generated by "tack" and convert
 * between the external representation to the internal one and
 * then invoke the corresponding operation on the domain.
 */
typedef bool (*dopfunc_t)(
    int argc,
    char const *const *argv,
    char const **result) ;
/*
 * Attribute read function.
 * These functions are generated by "tack" and read the
 * attribute value via the pycca portal and return the external
 * representation of the value.
 */
typedef bool (*attr_readfunc_t)(
    struct pycca_domain_portal const *portal,
    unsigned class_id,
    unsigned inst_id,
    unsigned attr_id,
    char const **result) ;
/*
 * Attribute update function.
 * These functions are generated by "tack" and convert from the
 * external representation of an attribute value to its internal
 * representation and then update the value via the pycca portal.
 */
typedef bool (*attr_updatefunc_t)(
    struct pycca_domain_portal const *portal,
    unsigned class_id,
    unsigned inst_id,
    unsigned attr_id,
    char const *attr_value,
    char const **result) ;
    
/*
 * A mapping from domain operation name to its corresponding
 * function.
 */
typedef struct {
    char const *name ;
    dopfunc_t dop_func ;
} dop_map_t ;

/*
 * A mapping from an attribute name to it corresponding ID and access
 * functions.
 */
typedef struct {
    char const *name ;
    unsigned id ;
    attr_readfunc_t attr_read ;
    attr_updatefunc_t attr_update ;
} attr_map_t ;

/*
 * A mapping from a name to a simple numerical ID.
 */
typedef struct {
    char const *name ;
    unsigned id ;
} inst_map_t ;

/*
 * A mapping from a name to a numerical ID with a parameter format function.
 */
typedef struct {
    char const *name ;
    unsigned id ;
    int (*paramFmt)(EventParamType *, int, char const **) ;
    unsigned pcount ;
} name_param_map_t ;

/*
 * Several of the class mappings have parameters associated with them.
 */
typedef name_param_map_t event_map_t ;
typedef name_param_map_t polyevent_map_t ;

/*
 * A mapping from a class name to its corresponding ID, attributes
 * instances and events.
 */
typedef struct {
    char const *name ;
    unsigned id ;
    attr_map_t const *attrs ;
    unsigned attr_count ;
    inst_map_t const *insts ;
    unsigned inst_count ;
    event_map_t const *events ;
    unsigned event_count ;
    polyevent_map_t const *polyevents ;
    unsigned polyevent_count ;
} class_map_t ;

/*
 * The entry into a domain. This data structure is generated by
 * "tack" for each domain and this is what is registered to the harness.
 */
typedef struct {
    char const *name ;
    dop_map_t const *dops ;
    unsigned dop_count ;
    class_map_t const *classes ;
    unsigned class_count ;
    struct pycca_domain_portal const *dportal ;
} dportal_t ;

/*
 * EXTERNAL FUNCTION DECLARATIONS
 */
extern void harness_init(void) ;
extern int harness_register(dportal_t const *dportal) ;
/*
 * printf to the stub output
 */
extern void harness_stub_printf(char const *type, char const *fmt, ...) ;
/*
 * vprintf to the stub output
 */
extern void harness_stub_vprintf(char const *type, char const *fmt, va_list ap) ;

#endif /* HARNESS_H_ */
