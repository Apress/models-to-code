# DO NOT EDIT THIS FILE!
# THIS FILE IS GENERATED FROM THE SOURCE OF A LITERATE PROGRAM.
# YOU MUST EDIT THE ORIGINAL SOURCE TO MODIFY THIS FILE.
#*++
# Copyright 2017 by Leon Starr, Andrew Mangogna and Stephen Mellor
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Project:
#   Models to Code Book
#
# Module:
#   Air Traffic Controller Domain pycca file
#*--

domain atctrl
    interface prolog {
        #include <stdint.h>
        // Any additional interface includes, etc.
        typedef char const *Employee_ID ;
        typedef char const *Station_Number ;
        typedef char const *Czone_Name ;
    }
    domain operation
    init()
    {
        // Your code here.
    }
    external operation
    Cannot_handoff_to_self(
        Employee_ID controller)
    {
        printf("Cannot Handoff to Self: \"%s\"\n", controller) ;
    }
    external operation
    Unknown_controller(
        Employee_ID controller)
    {
        printf("Bad Handoff Target: \"%s\"\n", controller) ;
    }
    external operation
    Zone_not_handled_by_controller(
        Employee_ID controller)
    {
        printf("Control zone not handled by \"%s\"\n", controller) ;
    }
    external operation
    Control_Zones_Active(
        Employee_ID atc)
    {
        printf("Control Zones Active: %s\n", atc) ;
    }
    external operation
    Break_required(
        Station_Number station)
    {
        printf("Break required: %s\n", station) ;
    }
    class Air_Traffic_Controller
        attribute (Employee_ID ID)
        attribute (Name_T Name)
        attribute (Experience_Level Rating)
        subtype R1 union
            Off_Duty_Controller
            On_Duty_Controller
        end
        machine
            default transition CH
            initial state OFF_DUTY
            
            transition OFF_DUTY - Ready_for_duty -> Verifying_Adequate_Break
            
            transition Verifying_Adequate_Break - Log_in -> Logging_In
            transition Verifying_Adequate_Break - Cannot_go_on_duty -> OFF_DUTY
            
            transition Logging_In - Logged_in -> ON_DUTY
            
            transition ON_DUTY - Ready_for_a_break -> Verifying_Full_Handoff
            transition ON_DUTY - Handoff -> Handing_off_Control_Zone
            
            transition Handing_off_Control_Zone - Handoff_complete -> ON_DUTY
            
            transition Logging_Out - Off_duty -> OFF_DUTY
            
            transition Verifying_Full_Handoff - Log_out -> Logging_Out
            transition Verifying_Full_Handoff - Must_hand_off_zones -> ON_DUTY
            state OFF_DUTY ()
            {
                // no activity for this state
            }
            state Verifying_Adequate_Break(Station_Number Station)
            {
                //+ the shift spec .= Shift Specification() // selects singleton
                ClassRefVar(Shift_Specification, the_shift_spec) =
                        Instance(Shift_Specification, singleton) ;
            
                ClassRefVar(Off_Duty_Controller, offdc) =
                    PYCCA_unionSubtype(self, R1, Off_Duty_Controller) ;
            
                //+ if ( _now - self.Last shift ended < the shift spec.Min break )
                if (offdc->Last_shift_ended == 0 ||
                        time(NULL) - offdc->Last_shift_ended < the_shift_spec->Min_break) {
                    //+ Log in( in.Station ) -> me
                    MechEcb li_sig = PYCCA_newEvent(Log_in, Air_Traffic_Controller, self,
                            self) ;
                    PYCCA_eventParam(li_sig, Air_Traffic_Controller, Log_in, Station) =
                            rcvd_evt->Station ;
                    PYCCA_postSelfEvent(li_sig) ;
                } else {
                    //+ Cannot go on duty -> me
                    PYCCA_generateToSelf(Cannot_go_on_duty) ;
                }
            }
            state Logging_In(Station_Number Station)
            {
                //+ migrate to On Duty Controller
                PYCCA_migrateSubtype(self, Air_Traffic_Controller, R1,
                        On_Duty_Controller) ;
            
                //+ my station = Duty Station( Number: in.Station )
                ClassRefVar(Duty_Station, my_station) ;
                PYCCA_selectOneStaticInstWhere(my_station, Duty_Station,
                        strcmp(my_station->Number, rcvd_evt->Station) == 0) ;
                assert(my_station != EndStorage(Duty_Station)) ;
            
                //+ & /R3/my station    // link station
                ClassRefVar(On_Duty_Controller, ondc) =
                        PYCCA_unionSubtype(self, R1, On_Duty_Controller) ;
                ondc->R3 = my_station ;
                my_station->R3 = ondc ;
            
                //+ Time logged in = _now.HMS
                ondc->Time_logged_in = time(NULL) ;
            
                //+ Logged in -> me
                PYCCA_generateToSelf(Logged_in) ;
            
                //+ In use -> my station
                PYCCA_generate(In_use, Duty_Station, my_station, self) ;
            }
            state ON_DUTY()
            {
                // no activity for this state
            }
            state Handing_off_Control_Zone(
                Czone_Name zone,
                Employee_ID controller)
            {
                //+ hoff zone .= /R2/Control Zone( Name: in.Zone )
                ClassRefVar(On_Duty_Controller, ondc) =
                        PYCCA_unionSubtype(self, R1, On_Duty_Controller) ;
                ClassRefVar(Control_Zone, hoff_zone) = NULL ;
                rlink_t *czlink ;
                PYCCA_forAllLinkedInst(ondc, R2, czlink) {
                    ClassRefVar(Control_Zone, found) =
                            PYCCA_linkToInstRef(czlink, Control_Zone, R2) ;
                    if (strcmp(rcvd_evt->zone, found->Name) == 0) {
                        hoff_zone = found ;
                        break ;
                    }
                }
                assert(hoff_zone != NULL) ;
            
                //+ if in.Controller == ID
                if (strcmp(rcvd_evt->controller, self->ID) == 0) {
                    //+ UI.Cannot handoff to self( Controller: in.Controller )
                    ExternalOp(Cannot_handoff_to_self)(rcvd_evt->controller) ;
                } else {
                    //+ new controller .= On Duty Controller( ID: in.Controller )
                    ClassRefVar(Air_Traffic_Controller, new_controller) ;
                    PYCCA_selectOneStaticInstWhere(new_controller,
                        Air_Traffic_Controller,
                        strcmp(new_controller->ID, rcvd_evt->controller) == 0 &&
                        new_controller->SubCodeMember(R1) ==
                            SubCodeValue(Air_Traffic_Controller, R1, On_Duty_Controller)) ;
            
                    if (new_controller == EndStorage(Air_Traffic_Controller)) {
                        //+ !new missing: UI.Unknown controller( Controller: in.Controller)
                        ExternalOp(Unknown_controller)(rcvd_evt->controller) ;
                    } else if (hoff_zone->R2 != ondc) {
                        //+ !old missing: UI.Zone not handled by( Controller: ID)
                        ExternalOp(Zone_not_handled_by_controller)(self->ID) ;
                    } else {
                        //+ swap hoff zone/R2/On Duty Controller with new controller
                        ClassRefVar(On_Duty_Controller, new_ondc) =
                            PYCCA_unionSubtype(new_controller, R1,
                                On_Duty_Controller) ;
                        PYCCA_unlinkFromMany(hoff_zone, R2) ;
                        PYCCA_linkToMany(new_ondc, R2, hoff_zone) ;
                        hoff_zone->R2 = new_ondc ;
                    }
                }
            
                //+ Handoff complete -> me
                PYCCA_generateToSelf(Handoff_complete) ;
            }
            state Logging_Out()
            {
                //+ User leaving -> /R3/Duty Station
                assert(self->SubCodeMember(R1) ==
                        SubCodeValue(Air_Traffic_Controller, R1,
                        On_Duty_Controller)) ;
                ClassRefVar(On_Duty_Controller, ondc) =
                        PYCCA_unionSubtype(self, R1, On_Duty_Controller) ;
                ClassRefVar(Duty_Station, ds) = ondc->R3 ;
                assert(ds != NULL) ;
                PYCCA_generate(User_leaving, Duty_Station, ds, self) ;
            
                //+ migrate to Off Duty Controller
                ondc->R3 = NULL ;
                ds->R3 = NULL ;
                PYCCA_migrateSubtype(self, Air_Traffic_Controller, R1,
                        Off_Duty_Controller) ;
            
                //+ Last shift ended = _now.HMS
                ClassRefVar(Off_Duty_Controller, offdc) =
                        PYCCA_unionSubtype(self, R1, Off_Duty_Controller) ;
                offdc->Last_shift_ended = time(NULL) ;
            
                //+ Off duty -> me
                PYCCA_generateToSelf(Off_duty) ;
            }
            state Verifying_Full_Handoff()
            {
                ClassRefVar(On_Duty_Controller, ondc) =
                        PYCCA_unionSubtype(self, R1, On_Duty_Controller) ;
            
                //+ if /R1/On Duty Controller/R2/Control Zone {
                if (PYCCA_isLinkNotEmpty(ondc, R2)) {
                    //+ Must handoff zones -> me
                    PYCCA_generateToSelf(Must_hand_off_zones) ;
            
                    //+  UI.Control Zones Active( ATC: ID )
                    ExternalOp(Control_Zones_Active)(self->ID) ;
                } else {
                    //+ Log out -> me
                    PYCCA_generateToSelf(Log_out) ;
                }
            }
        end
    end
    class Off_Duty_Controller
        attribute (Date_T Last_shift_ended) default {0}
    end
    class On_Duty_Controller
        attribute (Date_T Time_logged_in) default {0}
        reference R3 -> Duty_Station
        reference R2 ->>l Control_Zone
        
    end
    class Control_Zone
        attribute (Czone_Name Name)
        attribute (Aircraft_Quantity Traffic)
        reference R2 -> On_Duty_Controller
    end
    class Duty_Station
        attribute (Station_Number Number)
        attribute (Name_T Location)
        attribute (Aircraft_Maximum Capacity)
        reference R3 -> On_Duty_Controller
        
        machine
            default transition CH
            initial state AVAILABLE
            
            transition AVAILABLE - In_use -> IN_USE
            
            transition IN_USE - Max_shift_exceeded -> MAX_SHIFT_EXCEEDED
            transition IN_USE - User_leaving -> Canceling_Shift_Timeout
            
            transition MAX_SHIFT_EXCEEDED - User_leaving -> AVAILABLE
            
            transition Canceling_Shift_Timeout - Available -> AVAILABLE
            state AVAILABLE()
            {
                // no activity in this state
            }
            state IN_USE()
            {
                //+ selects singleton
                ClassRefVar(Shift_Specification, ss) =
                        Instance(Shift_Specification, singleton) ;
            
                //+ Max shift exceeded -> me after Shift Specification().Max shift
                PYCCA_generateDelayedToSelf(Max_shift_exceeded,
                        ss->Max_shift * 1000UL) ; // delay times are in ms
            }
            state MAX_SHIFT_EXCEEDED()
            {
                //+UI.Break required( Station: Number )
                ExternalOp(Break_required)(self->Number) ;
            }
            state Canceling_Shift_Timeout()
            {
                //+ cancel Max shift exceeded -> me
                PYCCA_cancelDelayedToSelf(Max_shift_exceeded) ;
            
                //+ Available -> me
                PYCCA_generateToSelf(Available) ;
            }
        end
    end
    class Shift_Specification
        attribute (Duration Min_break)
        attribute (Duration Max_shift)
    end
    table
    Air_Traffic_Controller (Employee_ID ID) (Name_T Name)
            (Experience_Level Rating) R1
    @atc53  {"53"} {"Toshiko"}  {"A"} -> On_Duty_Controller.atc53
    @atc67  {"67"} {"Gwen"}     {"B"} -> On_Duty_Controller.atc67
    @atc51  {"51"} {"Ianto"}    {"C"} -> On_Duty_Controller.atc51
    end
    table
    On_Duty_Controller          R2               R3
    @atc53                      ->> sfo end      -> s2
    @atc67                      ->> oak end      -> s1
    @atc51                      ->> sjc end      -> s3
    end
    table
    Control_Zone    (Czone_Name Name)   (Aircraft_Quantity Traffic) R2
    @sfo            {"SFO37B"}          {27}                        -> atc53
    @oak            {"OAK21C"}          {18}                        -> atc67
    @sjc            {"SJC18C"}          {9}                         -> atc51
    end
    table
    Duty_Station    (Station_Number Number) (Name_T Location) (Aircraft_Maximum Capacity)
    @s1             {"S1"}                  {"Front"}         {20}
    @s2             {"S2"}                  {"Center"}        {30}
    @s3             {"S3"}                  {"Front"}         {45}
    end
    instance Shift_Specification@singleton
        (Duration Min_break)    {15 * 60}               # 15 minutes in seconds
        (Duration Max_shift)    {(2 * 60 + 15) * 60}    # 2 hr 15 min in seconds
    end
    implementation prolog {
        // Any additional implementation includes, etc.
        #include <assert.h>
        #include <time.h>
        #include <string.h>
        #include "atctrl.h"
        typedef char const *Name_T ;
        typedef time_t Date_T ;
        typedef unsigned Aircraft_Quantity ;
        typedef unsigned Aircraft_Maximum ;
        typedef unsigned Duration ;
        typedef char const *Experience_Level ;
    }
end
