# DO NOT EDIT THIS FILE!
# THIS FILE IS GENERATED FROM THE SOURCE OF A LITERATE PROGRAM.
# YOU MUST EDIT THE ORIGINAL SOURCE TO MODIFY THIS FILE.
#*++
# Copyright 2017 by Leon Starr, Andrew Mangogna and Stephen Mellor
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Project:
#   Models to Code Book
#
# Module:
#   Lubrication Domain Workbook
#   
#*--

domain lube
    interface prolog {
        #include "pycca_portal.h"
        #include <stdint.h>
        // Any additional interface includes, etc.
        typedef uint32_t Count ;
    }
    domain operation
    init()
    {
        ClassRefVar(Autocycle_Session, acs) ;
        PYCCA_forAllInst(acs, Autocycle_Session) {
            if (IsInstInUse(acs)) {
                PYCCA_generate(Created, Autocycle_Session, acs, NULL) ;
            }
        }
    }
    domain operation
    Suspend_Autocycle_Session(
        InstId_t sessionId)
    {
        PYCCA_checkId(Autocycle_Session, sessionId) ;
        ClassRefVar(Autocycle_Session, session) =
                PYCCA_refOfId(Autocycle_Session, sessionId) ;
        if (IsInstInUse(session)) {
            InstOp(Autocycle_Session, Suspend)(session) ;
        }
    }
    domain operation
    Injector_max_pressure(
        InstId_t injId)
    {
        PYCCA_checkId(Injector, injId) ;
        ClassRefVar(Injector, inj) = PYCCA_refOfId(Injector, injId) ;
        if (IsInstInUse(inj)) {
            InstOp(Injector, Max_system_pressure)(inj) ;
        }
    }
    domain operation
    Lock_Machinery(
        InstId_t machineId)
    {
        PYCCA_checkId(Machinery, machineId) ;
        ClassRefVar(Machinery, machine) = PYCCA_refOfId(Machinery, machineId) ;
        /*
         * Since the Machinery class has a static population, there is no
         * need to check if the instance is in use. All Machinery instances
         * defined in the initial instance population are always in use.
         */
        InstOp(Machinery, Lock)(machine) ;
    }
    domain operation
    Unlock_Machinery(
        InstId_t machineId)
    {
        PYCCA_checkId(Machinery, machineId) ;
        ClassRefVar(Machinery, machine) = PYCCA_refOfId(Machinery, machineId) ;
        InstOp(Machinery, Unlock)(machine) ;
    }
    external operation
    UI_Deactivated(
        InstId_t sessionId)
    {
    }
    external operation
    App_Error(char const *Msg)
    {
        fprintf(stderr, "%s\n", Msg) ;
    }
    external operation
    SIO_Inject(InstId_t injectorId)
    {
    }
    external operation
    SIO_Stop_injecting(InstId_t injectorId)
    {
    }
    external operation
    SIO_Start_monitoring(InstId_t injectorId)
    {
    }
    external operation
    SIO_Stop_monitoring(InstId_t injectorId)
    {
    }
    external operation
    ALARM_Set_pressure_error(InstId_t injectorId)
    {
    }
    external operation
    ALARM_Set_dissipation_error(InstId_t injectorId)
    {
    }
    external operation
    ALARM_Clear_dissipation_error(InstId_t injectorId)
    {
    }
    external operation
    ALARM_Set_lube_level_very_low(InstId_t reservoirId)
    {
    }
    external operation
    ALARM_Clear_lube_level_very_low(InstId_t reservoirId)
    {
    }
    external operation
    ALARM_Set_lube_level_low(InstId_t reservoirId)
    {
    }
    external operation
    ALARM_Clear_lube_level_low(InstId_t reservoirId)
    {
    }
    external operation
    ALARM_Set_lube_level_empty(InstId_t reservoirId)
    {
    }
    external operation
    ALARM_Clear_lube_level_empty(InstId_t reservoirId)
    {
    }
    class Lubrication_Schedule
        attribute (Name_t Name)
        attribute (Duration Wait_interval)
        attribute (Duration Monitor_interval)
        attribute (Count Max_low_lube_cycles)
        attribute (bool Default_continuous_operation)
        attribute (Count Default_max_cycles)
        class operation findByName(
            char const *name) : (struct Lubrication_Schedule *) {
            ThisClassRefVar(ls) ;
            PYCCA_selectOneStaticInstOfThisClassWhere(ls, strcmp(ls->Name, name) == 0)
            return ls == ThisClassEndStorage ? NULL : ls ;
        }
    
        population static
    end
    class Injector_Design
        attribute (Model_Name Model)
        attribute (MPa Min_delivery_pressure)
        attribute (MPa Max_system_pressure)
        attribute (MPa Max_dissipation_pressure)
        attribute (Seconds Delivery_window)
        attribute (Seconds Good_injection_duration)
    end
    class Injector
        attribute (MPa Pressure) default {0}
        attribute (bool Dissipation_error) default {false}
        attribute (bool Injecting) default {false}
        reference R4 -> Injector_Design
        reference R5 -> Machinery
        
        reference R1 -> Lubrication_Schedule
        reference R2 -> Autocycle_Session
        reference R3 -> Reservoir
        machine
            default transition CH
            initial state SLEEPING
            transition BUILDING_PRESSURE - Stop -> Quit_low_pressure_injection
            transition BUILDING_PRESSURE - Above_inject_pressure -> INJECTING_AT_PRESSURE
            transition BUILDING_PRESSURE - Below_inject_pressure -> IG
            transition BUILDING_PRESSURE - Above_dissipation_pressure -> IG
            
            transition INJECTING_AT_PRESSURE - Stop -> Cancel_injection
            transition INJECTING_AT_PRESSURE - Good_injection -> Completed_good_injection
            transition INJECTING_AT_PRESSURE - Below_inject_pressure -> Not_enough_pressure
            transition INJECTING_AT_PRESSURE - Above_inject_pressure -> IG
            transition INJECTING_AT_PRESSURE - Above_dissipation_pressure -> IG
            
            transition SLEEPING - Wakeup -> Initiate_monitoring
            transition SLEEPING - Above_inject_pressure -> IG
            transition SLEEPING - Below_inject_pressure -> IG
            transition SLEEPING - Stop -> IG
            transition SLEEPING - Above_dissipation_pressure -> IG
            
            transition MONITORING - Above_dissipation_pressure -> Set_dissipation_error
            transition MONITORING - Start -> Clear_error_and_check_interlock
            transition MONITORING - Stop -> SLEEPING
            transition MONITORING - Above_inject_pressure -> IG
            transition MONITORING - Below_inject_pressure -> IG
            transition Start_injection - Wait_for_inject_pressure -> BUILDING_PRESSURE
            
            transition Not_enough_pressure - Wait_for_inject_pressure -> BUILDING_PRESSURE
            
            transition Completed_good_injection - Stopped -> SLEEPING
            
            transition Quit_low_pressure_injection - Stopped -> SLEEPING
            
            transition Initiate_monitoring - Monitor -> MONITORING
            
            transition Set_dissipation_error - Keep_monitoring -> MONITORING
            
            transition Clear_error_and_check_interlock - Locked_out -> SLEEPING
            transition Clear_error_and_check_interlock - OK_to_start -> Start_injection
            
            transition Cancel_injection - Injection_canceled -> Quit_low_pressure_injection
            state Start_injection()
            {
                ExternalOp(SIO_Inject)(PYCCA_idOfSelf) ;
                PYCCA_generateToSelf(Wait_for_inject_pressure) ;
            }
            state BUILDING_PRESSURE()
            {
                if (self->Pressure > self->R4->Min_delivery_pressure) {
                    PYCCA_generateToSelf(Above_inject_pressure) ;
                }
            }
            state INJECTING_AT_PRESSURE()
            {
                PYCCA_generateDelayedToSelf(Good_injection,
                        SecsToDelayTime(self->R4->Good_injection_duration)) ;
                self->Injecting = true ;
            }
            state Not_enough_pressure()
            {
                PYCCA_cancelDelayedToSelf(Good_injection) ;
                PYCCA_generateToSelf(Wait_for_inject_pressure) ;
            
                PYCCA_generate(Low_injection_pressure, Reservoir, self->R3, self) ;
                self->Injecting = false ;
            }
            state Cancel_injection()
            {
                PYCCA_cancelDelayedToSelf(Good_injection) ;
                PYCCA_generateToSelf(Injection_canceled) ;
                self->Injecting = false ;
            }
            state Completed_good_injection()
            {
                ExternalOp(SIO_Stop_injecting)(PYCCA_idOfSelf) ;
                PYCCA_generate(Good_injection, Autocycle_Session, self->R2, self) ;
                PYCCA_generateToSelf(Stopped) ;
                self->Injecting = false ;
            }
            state Quit_low_pressure_injection()
            {
                ExternalOp(SIO_Stop_injecting)(PYCCA_idOfSelf) ;
                PYCCA_generate(Low_pressure_injection, Autocycle_Session, self->R2, self) ;
                PYCCA_generateToSelf(Stopped) ;
            }
            state Clear_error_and_check_interlock()
            {
                if (!self->Dissipation_error) {
                    ExternalOp(ALARM_Clear_dissipation_error)(PYCCA_idOfSelf) ;
                }
                self->Dissipation_error = false ;
            
                if (self->R5->Locked_out) {
                    PYCCA_generateToSelf(Locked_out) ;
                } else {
                    PYCCA_generateToSelf(OK_to_start) ;
                }
            }
            state SLEEPING()
            {
                ExternalOp(SIO_Stop_monitoring)(PYCCA_idOfSelf) ;
            }
            state Initiate_monitoring()
            {
                ExternalOp(SIO_Start_monitoring)(PYCCA_idOfSelf) ;
                PYCCA_generateToSelf(Monitor) ;
            }
            state MONITORING()
            {
            }
            state Set_dissipation_error()
            {
                if (!self->Dissipation_error) {
                    self->Dissipation_error = true ;
                    ExternalOp(ALARM_Set_dissipation_error)(PYCCA_idOfSelf) ;
                }
                PYCCA_generateToSelf(Keep_monitoring) ;
            }
        end
        instance operation Max_system_pressure() {
            ExternalOp(ALARM_Set_pressure_error)(PYCCA_idOfSelf) ;
            ClassRefVar(Autocycle_Session, acs) = self->R2 ;
            InstOp(Autocycle_Session, Deactivate)(acs) ;
        }
    end
    class Autocycle_Session
        attribute (Count Cycles_requested) default {0}
        attribute (bool Continuous_operation) default {false}
        attribute (Count Failed_cycles) default {0}
        attribute (Count Cycles_since_activation) default {0}
        attribute (bool Lubricating) default {false}
        attribute (bool Active) default {false}
        attribute (bool Deactivate) default {false}
        attribute (bool Suspend_requested) default {false}
        attribute (Seconds Wait_time_remaining) default {0}
        reference R2_INJ -> Injector
        reference R2_LBS -> Lubrication_Schedule
        
        instance operation Deactivate() {
            self->Deactivate = true ;
            PYCCA_generateToSelf(Deactivate) ;
        }
        instance operation Suspend() {
            self->Suspend_requested = true ;
            PYCCA_generateToSelf(Suspend) ;
        }
        machine
            default transition CH
            initial state Creating
            
            transition . - New_session -> Creating
            
            final state Spawn_new_session
            transition NOT_ACTIVE - Change_schedule -> Spawn_new_session
            transition NOT_ACTIVE - Suspend -> IG
            transition NOT_ACTIVE - Resume -> IG
            transition NOT_ACTIVE - Activate -> Initialize
            transition NOT_ACTIVE - Deactivate -> IG
            
            transition WAIT_INTERVAL - Change_schedule -> IG
            transition WAIT_INTERVAL - Suspend -> WAIT_SUSPENDED
            transition WAIT_INTERVAL - Resume -> IG
            transition WAIT_INTERVAL - Activate -> IG
            transition WAIT_INTERVAL - Deactivate -> Cancel_wait_interval
            
            transition WAIT_SUSPENDED - Change_schedule -> IG
            transition WAIT_SUSPENDED - Suspend -> IG
            transition WAIT_SUSPENDED - Resume -> WAIT_INTERVAL
            transition WAIT_SUSPENDED - Activate -> IG
            transition WAIT_SUSPENDED - Deactivate -> NOT_ACTIVE
            
            transition MONITOR_INTERVAL - Change_schedule -> IG
            transition MONITOR_INTERVAL - Suspend -> MONITOR_SUSPENDED
            transition MONITOR_INTERVAL - Resume -> IG
            transition MONITOR_INTERVAL - Activate -> IG
            transition MONITOR_INTERVAL - Deactivate -> Cancel_monitor_interval
            
            transition MONITOR_SUSPENDED - Change_schedule -> IG
            transition MONITOR_SUSPENDED - Suspend -> IG
            transition MONITOR_SUSPENDED - Resume -> MONITOR_INTERVAL
            transition MONITOR_SUSPENDED - Activate -> IG
            transition MONITOR_SUSPENDED - Deactivate -> NOT_ACTIVE
            
            transition LUBE_INTERVAL - Change_schedule -> IG
            transition LUBE_INTERVAL - Suspend -> IG
            transition LUBE_INTERVAL - Resume -> IG
            transition LUBE_INTERVAL - Activate -> IG
            transition LUBE_INTERVAL - Deactivate -> CANCELING_LUBRICATION
            transition LUBE_INTERVAL - Good_injection -> Normal_lubrication
            
            transition LOW_PRESSURE_LUBRICATION - Change_schedule -> IG
            transition LOW_PRESSURE_LUBRICATION - Suspend -> IG
            transition LOW_PRESSURE_LUBRICATION - Resume -> IG
            transition LOW_PRESSURE_LUBRICATION - Activate -> IG
            transition LOW_PRESSURE_LUBRICATION - Deactivate -> IG
            transition LOW_PRESSURE_LUBRICATION - Low_pressure_injection -> Count_cycle
            transition LOW_PRESSURE_LUBRICATION - Good_injection -> Count_cycle
            
            transition CANCELING_LUBRICATION - Change_schedule -> IG
            transition CANCELING_LUBRICATION - Suspend -> IG
            transition CANCELING_LUBRICATION - Resume -> IG
            transition CANCELING_LUBRICATION - Activate -> IG
            transition CANCELING_LUBRICATION - Deactivate -> IG
            transition CANCELING_LUBRICATION - Low_pressure_injection -> Interrupted_cycle_count
            transition CANCELING_LUBRICATION - Good_injection -> Count_cycle
            transition WAIT_INTERVAL - Get_ready_to_lubricate -> MONITOR_INTERVAL
            
            transition MONITOR_INTERVAL - Lubricate -> LUBE_INTERVAL
            
            transition LUBE_INTERVAL - Lube_interval_ended -> LOW_PRESSURE_LUBRICATION
            transition Creating - Created -> NOT_ACTIVE
            
            transition Initialize - Activated -> WAIT_INTERVAL
            transition Initialize - Locked_out -> NOT_ACTIVE
            
            transition Count_cycle - Next_cycle -> WAIT_INTERVAL
            transition Count_cycle - Stop -> NOT_ACTIVE
            transition Normal_lubrication - Count_as_normal -> Count_cycle
            
            transition Cancel_monitor_interval - Monitor_interval_canceled -> NOT_ACTIVE
            
            transition Cancel_wait_interval - Wait_interval_canceled -> NOT_ACTIVE
            
            transition Interrupted_cycle_count - Cycle_interrupted -> Count_cycle
            state Creating(
                char const *schedule,
                unsigned injector)
            {
                ClassRefVar(Lubrication_Schedule, ls) =
                    ClassOp(Lubrication_Schedule, findByName)(rcvd_evt->schedule) ;
                assert(ls != NULL) ;
                ClassRefVar(Injector, inj) = PYCCA_refOfId(Injector, rcvd_evt->injector) ;
                self->R2_LBS = ls ;
                self->R2_INJ = inj ;
                inj->R2 = self ;
            
                PYCCA_generateToSelf(Created) ;
            }
            state NOT_ACTIVE()
            {
                ExternalOp(UI_Deactivated)(PYCCA_idOfSelf) ;
            
                ClassRefVar(Lubrication_Schedule, ls) = self->R2_LBS ;
                self->Continuous_operation = ls->Default_continuous_operation ;
                self->Cycles_requested = ls->Default_max_cycles ;
                self->Lubricating =
                self->Active =
                self->Deactivate =
                self->Suspend_requested = false ;
            }
            state Initialize(
                bool continuous,
                Count count)
            {
                if (self->R2_INJ->R5->Locked_out) {
                    ExternalOp(App_Error)("Machinery lockout active") ;
                    PYCCA_generateToSelf(Locked_out) ;
                } else {
                    if (rcvd_evt->count != 0) {
                        self->Cycles_requested = rcvd_evt->count ;
                    }
                    self->Continuous_operation = rcvd_evt->continuous ;
                    self->Cycles_since_activation = 0 ;
                    self->Failed_cycles = 0 ;
            
                    self->Wait_time_remaining = self->R2_LBS->Wait_interval ;
                    self->Active = true ;
                    PYCCA_generateToSelf(Activated) ;
                }
            }
            state WAIT_INTERVAL()
            {
                if (self->Deactivate) {
                    PYCCA_generateToSelf(Deactivate) ;
                } else {
                    PYCCA_generateDelayedToSelf(Get_ready_to_lubricate, 
                        SecsToDelayTime(self->Wait_time_remaining)) ;
                    if (self->Suspend_requested) {
                        PYCCA_generateToSelf(Suspend) ;
                    }
                }
            }
            state Cancel_wait_interval()
            {
                PYCCA_cancelDelayedToSelf(Get_ready_to_lubricate) ;
                PYCCA_generateToSelf(Wait_interval_canceled) ;
            }
            state WAIT_SUSPENDED()
            {
                self->Wait_time_remaining =
                        DelayTimeToSecs(PYCCA_remainDelayedToSelf(Get_ready_to_lubricate)) ;
                PYCCA_cancelDelayedToSelf(Get_ready_to_lubricate) ;
                self->Suspend_requested = false ;
            }
            state MONITOR_INTERVAL()
            {
                PYCCA_generateDelayedToSelf(Lubricate,
                    SecsToDelayTime(self->R2_LBS->Monitor_interval)) ;
                PYCCA_generate(Wakeup, Injector, self->R2_INJ, self) ;
            }
            state Cancel_monitor_interval()
            {
                PYCCA_cancelDelayedToSelf(Lubricate) ;
                PYCCA_generate(Stop, Injector, self->R2_INJ, self) ;
                PYCCA_generateToSelf(Monitor_interval_canceled) ;
            }
            state MONITOR_SUSPENDED()
            {
                PYCCA_cancelDelayedToSelf(Lubricate) ;
                PYCCA_generate(Stop, Injector, self->R2_INJ, self) ;
            }
            state LUBE_INTERVAL()
            {
                PYCCA_generate(Start, Injector, self->R2_INJ, self) ;
                PYCCA_generateDelayedToSelf(Lube_interval_ended,
                        SecsToDelayTime(self->R2_INJ->R4->Delivery_window)) ;
                self->Lubricating = true ;
            }
            state CANCELING_LUBRICATION()
            {
                PYCCA_cancelDelayedToSelf(Lube_interval_ended) ;
                PYCCA_generate(Stop, Injector, self->R2_INJ, self) ;
                self->Lubricating = false ;
            }
            state Normal_lubrication()
            {
                PYCCA_cancelDelayedToSelf(Lube_interval_ended) ;
                PYCCA_generateToSelf(Count_as_normal) ;
                self->Lubricating = false ;
            }
            state LOW_PRESSURE_LUBRICATION()
            {
                PYCCA_generate(Stop, Injector, self->R2_INJ, self) ;
                self->Failed_cycles++ ;
                self->Lubricating = false ;
            }
            state Count_cycle()
            {
                self->Cycles_since_activation++ ;
                if (self->Failed_cycles >= self->R2_LBS->Max_low_lube_cycles) {
                    PYCCA_generate(Too_many_low_lube_cycles, Reservoir, self->R2_INJ->R3, self) ;
                }
                if (!self->Deactivate &&
                        (self->Continuous_operation ||
                        self->Cycles_since_activation < self->Cycles_requested)) {
                    PYCCA_generateToSelf(Next_cycle) ;
                } else {
                    PYCCA_generateToSelf(Stop) ;
                }
            }
            state Interrupted_cycle_count()
            {
                self->Failed_cycles++ ;
                PYCCA_generateToSelf(Cycle_interrupted) ;
            }
            state Spawn_new_session(
                char const *schedule)
            {
                MechEcb new_session = PYCCA_newCreationEventForThisClass(New_session, self) ;
                PYCCA_eventParam(new_session, Autocycle_Session, New_session, schedule) =
                        rcvd_evt->schedule ;
                PYCCA_eventParam(new_session, Autocycle_Session, New_session, injector) =
                        PYCCA_idOfRef(Injector, self->R2_INJ) ;
                PYCCA_postEvent(new_session) ;
            
                self->R2_INJ->R2 = NULL ; // <1>
            }
        end
        population dynamic
    end
    class Machinery
        attribute (bool Locked_out) default {false}
        reference R5 ->>c Injector
        instance operation Unlock() {
            self->Locked_out = false ;
        }
        instance operation Lock() {
            self->Locked_out = true ;
            ClassRefConstSetVar(Injector, myinjs) ;
            PYCCA_forAllRelated(myinjs, self, R5) {
                ClassRefVar(Injector, inj) = *myinjs ;
                ClassRefVar(Autocycle_Session, acs) = inj->R2 ;
                InstOp(Autocycle_Session, Deactivate)(acs) ;
            }
        }
    end
    class Reservoir
        attribute (Fluid_State Level)
        reference R3 ->>c Injector
        
        machine
            default transition CH
            initial state NORMAL
            
            transition NORMAL - Low_lube_level -> LOW
            transition NORMAL - Normal_lube_level -> IG
            transition NORMAL - Low_injection_pressure -> IG
            
            transition LOW - Low_lube_level -> IG
            transition LOW - Normal_lube_level -> NORMAL
            transition LOW - Too_many_low_lube_cycles -> VERY_LOW
            transition LOW - Low_injection_pressure -> IG
            
            transition VERY_LOW - Low_lube_level -> IG
            transition VERY_LOW - Normal_lube_level -> NORMAL
            transition VERY_LOW - Low_injection_pressure -> EMPTY
            
            transition EMPTY - Low_lube_level -> IG
            transition EMPTY - Normal_lube_level -> NORMAL
            transition EMPTY - Low_injection_pressure -> IG
            state NORMAL()
            {
                self->Level = FS_normal ;
                ClassRefConstSetVar(Injector, myinjs) ;
                PYCCA_forAllRelated(myinjs, self, R3) {
                    ClassRefVar(Injector, inj) = *myinjs ;
                    ClassRefVar(Autocycle_Session, acs) = inj->R2 ;
                    acs->Failed_cycles = 0 ;
                }
                ExternalOp(ALARM_Clear_lube_level_very_low)(PYCCA_idOfSelf) ;
                ExternalOp(ALARM_Clear_lube_level_low)(PYCCA_idOfSelf) ;
                ExternalOp(ALARM_Clear_lube_level_empty)(PYCCA_idOfSelf) ;
            }
            state LOW()
            {
                self->Level = FS_low ;
                ExternalOp(ALARM_Set_lube_level_low)(PYCCA_idOfSelf) ;
            }
            state VERY_LOW()
            {
                self->Level = FS_verylow ;
                ExternalOp(ALARM_Set_lube_level_very_low)(PYCCA_idOfSelf) ;
            }
            state EMPTY()
            {
                self->Level = FS_empty ;
                ExternalOp(ALARM_Set_lube_level_empty)(PYCCA_idOfSelf) ;
                ClassRefConstSetVar(Injector, myinjs) ;
                PYCCA_forAllRelated(myinjs, self, R3) {
                    ClassRefVar(Injector, inj) = *myinjs ;
                    ClassRefVar(Autocycle_Session, acs) = inj->R2 ;
                    InstOp(Autocycle_Session, Deactivate)(acs) ;
                }
            }
        end
    end
    table
    Lubrication_Schedule
        (Name_t Name)
        (Duration Wait_interval)
        (Duration Monitor_interval)
        (Count Max_low_lube_cycles)
        (bool Default_continuous_operation)
        (Count Default_max_cycles)
    
    @gearbox    {"Gearbox"}     {210}   {45}    {8}     {true}  {5000}
    @generator  {"Generator"}   {120}   {25}    {10}    {true}  {10000}
    @shaft      {"Shaft"}       {90}    {30}    {10}    {true}  {10000}
    @test2      {"Test2"}       {20}    {15}    {1}     {false} {200}
    end
    table
    Injector_Design
        (Model_Name Model)
        (MPa Min_delivery_pressure)
        (MPa Max_system_pressure)
        (MPa Max_dissipation_pressure)
        (Seconds Delivery_window)
        (Seconds Good_injection_duration)
    
    @ihn4       {"IHN4"}    {19}    {35}    {32}    {90}    {9}
    @ix77b      {"IX77B"}   {15}    {26}    {26}    {120}   {11}
    end
    table
    Injector
        (MPa Pressure)
        (bool Dissipation_error)
        (bool Injecting)
        R1
        R3
        R4
        R5
        R2
    
    @in1    {20}    {false} {false} -> gearbox -> res1 -> ix77b -> m1 -> acs1
    @in2    {0}     {false} {false} -> shaft -> res2 -> ihn4 -> m2 -> acs2
    @in3    {0}     {true}  {true}  -> generator -> res1 -> ix77b -> m3 -> acs3
    end
    table
    Autocycle_Session
        R2_INJ
        R2_LBS
        (Count Cycles_requested)
        (bool Continuous_operation)
        (Count Failed_cycles)
        (bool Lubricating)
        (bool Active)
        (bool Deactivate)
        (Seconds Wait_time_remaining)
    
    @acs1   -> in1 -> gearbox   {0} {true} {0} {false} {true} {false} {90}
    @acs2   -> in2 -> shaft     {0} {true} {1} {true}  {true} {true}  {0}
    @acs3   -> in3 -> generator {0} {true} {0} {false} {true} {true}  {0}
    end
    table
    Machinery
        (bool Locked_out)
        R5
    
    @m1     {false}     ->> in1 end
    @m2     {false}     ->> in2 end
    @m3     {false}     ->> in3 end
    end
    table
    Reservoir
        (Fluid_State Level)
        R3
    
    @res1   {FS_normal} ->> in1 in3 end
    @res2   {FS_low}    ->> in2 end
    end
    implementation prolog {
        // Any additional implementation includes, etc.
        #include <assert.h>
        #include <time.h>
        #include <string.h>
        #include "lube.h"
        typedef uint32_t Seconds ;
        typedef uint32_t Duration ;
        typedef uint32_t MPa ;
        typedef char const *Name_t ;
        typedef char const *Model_Name ;
        typedef enum {
            FS_normal,
            FS_low,
            FS_verylow,
            FS_empty
        } Fluid_State ;
        /*
         * To speed testing along, we will scale the time. When converting from
         * seconds to milliseconds in dealing with delayed events, we will us a
         * factor to allow us to scale real time. By default we will cause things
         * to run 4 times faster than real time.
         */
    #ifdef INSTRUMENT
    #   ifndef RUNFACTOR
    #       define  RUNFACTOR 4UL
    #   endif /* RUNFACTOR */
    #   define SecsToDelayTime(s)   ((s) * (1000UL / RUNFACTOR))
    #   define DelayTimeToSecs(d)   ((d) / (1000UL / RUNFACTOR))
    #   else
    #   define SecsToDelayTime(s)   ((s) * 1000UL)
    #   define DelayTimeToSecs(d)   ((d) / 1000UL)
    #endif /* INSTRUMENT */
    }
end
